<?php

namespace Tests\Unit;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Event;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Mail;
use Tests\TestCase;
use Yahyya\taskmanager\App\Http\Controllers\LabelController;
use Yahyya\taskmanager\App\Http\Controllers\TaskController;
use Yahyya\taskmanager\App\Http\Middleware\CheckAuthToken;
use Yahyya\taskmanager\App\Http\Requests\StoreLabel;
use Yahyya\taskmanager\App\Http\Requests\StoreTask;
use Yahyya\taskmanager\App\Http\Requests\UpdateTask;
use Yahyya\taskmanager\App\Models\Label;
use Yahyya\taskmanager\App\Models\Task;
use Yahyya\taskmanager\App\Models\User;
use Yahyya\taskmanager\App\Repositories\LabelRepository;
use Yahyya\taskmanager\App\Repositories\TaskRepository;
use Yahyya\taskmanager\Events\TaskStatusChanged;
use Yahyya\taskmanager\Mail\UpdateMail;

class UserTest extends TestCase
{

    use RefreshDatabase;

    private $user = null;
    private $request =  null;
    private $taskController = null;
    private $taskRepo = null;
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->request = new Request();
        $this->user = $this->checkUserAuthorization();

        $this->taskRepo = new TaskRepository();
        $this->taskController = new TaskController($this->taskRepo);
    }

    private function authorizeToken(string $token)
    {

        $this->request->headers->set('Authorization', 'Bearer ' . $token);

        $middleware = new CheckAuthToken();
        $response = $middleware->handle($this->request, function () {
            return response()->json(['message' => 'Authorized'], 200);
        });
        return $response;
    }

    private function checkUserAuthorization()
    {
        // Authorized user :
        $user = factory(User::class)->create();
        $authResponse = $this->authorizeToken($user->api_token);
        $this->assertEquals($authResponse->getStatusCode(), 200);
        return $user;
    }

    public function test_user_has_api_token_column()
    {
        $user = factory(User::class)->create();
        $this->assertIsString($user->api_token);
    }

    public function test_user_authentication()
    {
        //check if user can not login with fake/null token
        $token = Hash::make('1234');

        $authReponse = $this->authorizeToken($token);
        $this->assertEquals($authReponse->getStatusCode(), 403);

        // Correct assertion with correct api token :
        $user = factory(User::class)->create();
        $authResponse = $this->authorizeToken($user->api_token);

        $this->assertEquals($authResponse->getStatusCode(), 200);
        $this->assertTrue(Auth::check());
    }

    public function test_user_can_add_unique_labels()
    {
        $labelRepo = new LabelRepository();
        $labelController = new LabelController($labelRepo);

        $request = new StoreLabel();
        $request->merge(['title' => 'Test Label']);
        $request->setContainer(app())->validateResolved();

        $this->assertEquals($labelController->store($request)->getStatusCode(),200);
        //check if we can not save this label again (Unique)
        $this->assertNotEquals($labelController->store($request),200);
    }


    public function test_user_can_add_new_task()
    {
        $request = new StoreTask();
        $request->merge(['title' => 'Test Task', 'user_id' => $this->user->id, 'status' => 1, 'desc' => 'Test Task Desc']);
        $request->setContainer(app())->validateResolved();
        $this->assertEquals($this->taskController->store($request)->getStatusCode(),200);
    }

    public function test_user_can_update_a_task()
    {

        $task = factory(Task::class)->create();
        $request = new UpdateTask();
        $request->merge(['title' => 'UpdatedTitle', 'desc' => 'Updated']);
        $request->setContainer(app())->validateResolved();
        $this->assertEquals($this->taskController->update($request, $task)->getStatusCode(),200);
        $this->assertEquals(Task::find($task->id)->title, 'UpdatedTitle');
        $this->assertEquals(Task::find($task->id)->desc, 'Updated');
    }

    public function test_user_can_change_status()
    {
        $task = factory(Task::class)->create();
        $this->taskController->toggleStatus($task);
    }

    public function test_user_can_add_label_to_a_task()
    {
        $task = factory(Task::class)->create();
        $labels = factory(Label::class,5)->create();

        $labels = $labels->map(function($label){
            return $label->id;
        });
        $this->taskRepo->addLabels($task,$labels);
        $this->assertEquals($task->labels()->count(),5);

        // check if empty array sent , no error and no change to the amount of labels
        $res = $this->taskRepo->addLabels($task,[]);
        $this->assertEquals($res,true);
        $this->assertEquals($task->labels()->count(),5);

    }

    public function test_user_can_get_list_of_tasks_assigned_to_a_label()
    {

        $task = factory(Task::class)->create();
        $newTask = factory(Task::class)->create();
        $labels = factory(Label::class,5)->create();
        $newLabels = factory(Label::class,5)->create();

        $labels = $labels->map(function($label){
            return $label->id;
        });
        $this->taskRepo->addLabels($task,$labels);

        // the labels assignment is working correctly
        $this->assertEquals(( Label::find($labels[0]))->tasks()->count(),1);
        $this->taskRepo->addLabels($newTask,$labels);
        $this->assertEquals(( Label::find($labels[0]))->tasks()->count(),2);
        $this->assertEquals($newLabels[0]->tasks()->count(),0);

    }

    public function test_user_able_to_get_list_of_labels()
    {

        $labelRepo = new LabelRepository();
        $labelController = new LabelController($labelRepo);

        $task = factory(Task::class)->create();
        $newTask = factory(Task::class)->create();
        $labels = factory(Label::class,5)->create();
        $labels = $labels->map(function($label){
            return $label->id;
        });
        // more labels
        factory(Label::class,5)->create();

        $this->taskRepo->addLabels($task,$labels);
        $this->taskRepo->addLabels($newTask,$labels);

        $this->assertJson($labelController->list()->toJson());
    }

    public function test_user_able_to_get_tasks_with_labels()
    {

        $task = factory(Task::class,10)->create();
        $labels = factory(Label::class,5)->create();
        $labels = $labels->map(function($label){
            return $label->id;
        });
        $this->taskRepo->addLabels($task[0],$labels);
        $this->assertJson($this->taskController->list()->toJson());
    }

    public function test_user_able_to_get_task_details()
    {

        $users = factory(User::class,3)->create();
        $task = factory(Task::class)->create();
        $request = new Request();
        $request->merge(['id' => $task->id]);
        $this->assertJson($this->taskController->view($request,$task)->toJson());

        //change this task owner so we should recieve 403 error code
        $task->update(['user_id'=>2]);
        $this->assertEquals($this->taskController->view($request,$task)->getStatusCode(),403);
    }

    function test_an_event_is_emitted_when_task_status_closed()
    {

        Event::fake();

        $task = factory(Task::class)->create();
        $this->taskController->toggleStatus($task);

        Event::assertDispatched(TaskStatusChanged::class, function ($event) use ($task) {

            return $event->task->id === $task->id;
        });
    }

    function test_sends_update_email()
    {

        Mail::fake();
        $task = factory(Task::class)->create();

        Mail::assertNothingSent();

        Mail::to('y.t.15132@gmail.com')->send(new UpdateMail($task));
        Mail::assertSent(UpdateMail::class,function ($mail) use ($task){
           return $mail->task->id = $task->id;
        });
    }


}
